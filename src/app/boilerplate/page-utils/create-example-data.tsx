/*
|-----------------------------------------
| setting up CreateExampleData for the App
| @author: Toufiquer Rahman<toufiquer.0@gmail.com>
| @copyright: Toufiquer, May, 2024
|-----------------------------------------
*/



  //   boilerPlate: [
  //           {
  //             id: "1",
  //             name: "",
  //             description: "",
  //             content: [{ id: "1", name: "", code: [""], fileName: "" }],
  //           },
  //         ],
  // examplePath: "",
            
    
import { boilerPageInterface } from "./type";

export const exampleBoilerPlateData: boilerPageInterface = {
  pageName: "BoilerPlate",
  data: [
    {
      context: [
        {
          id: "001",
          important: true,
          title: "NEXT",
          documentation: [
            {
              id: "1",
              url: "https://nextjs.org/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/create-next-app",
              name: "Go NPM",
            },
          ],
          description: [
            "The React Framework for the Web",
            "To create front-end and backend",
          ],
          code: [
            { id: "1", Terminal: "npx create-next-app@latest" },
            { id: "2", npm: "npx create-next-app@latest" },
            { id: "3", yarn: "yarn create next-app" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "nextJs environment Setup",
              description:
                "You can configure your api key with the help of environment variables",
              content: [
                {
                  id: "1",
                  name: "Export",
                  fileName: ".env.local",
                  code: ["MONGOOSE_URI=exampleOfHash"],
                },
                {
                  id: "2",
                  name: "Import",
                  fileName: "app.tsx | your file name",
                  code: ["process.env.MONGOOSE_URI"],
                },
                {
                  id: "3",
                  name: "Backend Api",
                  fileName: "route.ts",
                  code: [
                    `import type {NextApiRequest, NextApiResponse} from 'next';`,

                    `export async function GET(req: NextApiRequest, res: NextApiResponse) {`,
                    `  const result = {message: 'get request invoked successfully'};`,
                    `  return new Response(JSON.stringify(result));`,
                    `}`,

                    `export async function POST(`,
                    `  req: NextApiRequest & {json: () => void},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  const result = await req.json();`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      message: 'Post request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `}`,
                    `// it can change all data.`,
                    `export async function PUT(`,
                    `  req: NextApiRequest & {json: () => {id: string; data: any}},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  const result = await req.json();`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      message: 'Put request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `}`,
                    `// only change particular data not change all data`,
                    `export async function PATCH(`,
                    `  req: NextApiRequest & {json: () => void},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  const result = await req.json();`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      message: 'Patch request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `}`,
                    `export async function DELETE(`,
                    `  req: NextApiRequest & {json: () => void},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  const result = await req.json();`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      message: 'Patch request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `}`,
                  ],
                },
              ],
            },
          ],
          examplePath: "src/example-design/",
        },
        {
          id: "009",
          important: true,
          title: "REACT-HOOK-FORM",
          documentation: [
            {
              id: "1",
              url: "https://react-hook-form.com/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/react-hook-form",
              name: "Go NPM",
            },
          ],
          description: [
            "Performant, flexible and extensible forms with easy-to-use validation.",
            "Faster create form with validation",
          ],
          code: [
            { id: "1", npm: "npm install react-hook-form" },
            { id: "2", yarn: "yarn add react-hook-form" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "Basic template",
              description:
                "The following code excerpt demonstrates a basic usage example",
              content: [
                {
                  id: "1",
                  name: "Import and Type",
                  code: [
                    `import { useForm, SubmitHandler } from "react-hook-form";`,
                    `type Inputs = {`,
                    `example: string,`,
                    `exampleRequired: string`,
                    `}`,
                  ],
                  fileName: "form.tsx",
                },
                {
                  id: "2",
                  name: "function",
                  code: [
                    `const {`,
                    `register,`,
                    `handleSubmit,`,
                    `watch,`,
                    `formState: { errors },`,
                    `} = useForm<Inputs>();`,
                    `const onSubmit: SubmitHandler<Inputs> = (data) => console.log(data)`,
                  ],
                  fileName: "form.tsx",
                },
                {
                  id: "4",
                  name: "function",
                  code: [
                    `/* "handleSubmit" will validate your inputs before invoking "onSubmit" */`,
                    `<form onSubmit={handleSubmit(onSubmit)}>`,
                    `  {/* register your input into the hook by invoking the "register" function */}`,
                    `  <input defaultValue="test" {...register("example")} />`,
                    `  {/* include validation with required or other standard HTML validation rules */}`,
                    `  <input {...register("exampleRequired", { required: true })} />`,
                    `  {/* errors will return when field validation fails  */}`,
                    `  {errors.exampleRequired && <span>This field is required</span>}`,
                    `  <input type="submit" />`,
                    `</form>`,
                  ],
                  fileName: "form.tsx",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "010",
          title: "REACT-TOAST",
          documentation: [
            {
              id: "1",
              name: "Go NPM ",
              url: "https://www.npmjs.com/package/react-toastify",
            },
          ],
          code: [
            { id: "1", npm: "npm i react-toastify" },
            { id: "2", yarn: "yarn add react-toastify" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "React-Toastify",
              description:
                "React-Toastify allows you to add notifications to your app with ease. No more nonsense!",
              content: [
                {
                  id: "2",
                  name: "Import ",
                  code: [
                    `import React from 'react';`,
                    `import { ToastContainer } from 'react-toastify';`,
                    `import 'react-toastify/dist/ReactToastify.css';`,
                  ],
                  fileName: "App.tsx",
                },
                {
                  id: "3",
                  name: "Write down to your App Component",
                  code: [`<ToastContainer autoClose={5000}/>`],
                  fileName: "App.tsx",
                },
                {
                  id: "4",
                  name: "Import",
                  code: [`import { ToastContainer } from 'react-toastify';`],
                  fileName: "",
                },
                {
                  id: "5",
                  name: "invoke function",
                  code: [
                    ` const notify = () => toast("Wow so easy!",{autoClose: {5000}});`,
                  ],
                  fileName: "",
                },
              ],
            },
          ],
          examplePath: "arc/App.tsx",
        },
        {
          id: "011",
          important: true,
          title: "REDUX",
          documentation: [
            {
              id: "1",
              url: "https://redux.js.org/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/redux",
              name: "Go NPM",
            },
          ],
          description: ["Store management with Caching mechanism"],
          code: [
            { id: "1", npm: "npm i react-hook-form" },
            { id: "2", yarn: "yarn add react-hook-form" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "Redux toolkit query ",
              description: "You can use rtk query to cache and manage store",
              content: [
                {
                  id: "1",
                  name: "Create a global store",
                  code: [
                    `import {configureStore} from '@reduxjs/toolkit';`,
                    `import {apiSlice} from './../features/api/apiSlice';`,
                    `import usersSlice from './../features/users/usersSlice';`,
                    `import {TypedUseSelectorHook, useSelector} from 'react-redux';`,
                    `import blogSlice from '../features/blog/blogSlice';`,
                    `export const store = configureStore({`,
                    `  reducer: {`,
                    `    [apiSlice.reducerPath]: apiSlice.reducer,`,
                    `    users: usersSlice,`,
                    `    blogs: blogSlice,`,
                    `  },`,
                    `  devTools: process.env.NODE_ENV !== 'production',`,
                    `  middleware: getDefaultMiddleware =>`,
                    `    getDefaultMiddleware().concat(apiSlice.middleware),`,
                    `});`,
                    `export type RootState = ReturnType<typeof store.getState>;`,
                    `export type appDispatch = typeof store.dispatch;`,
                    `export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;`,
                  ],
                  fileName: "src/redux/app/store.ts",
                },
                {
                  id: "2",
                  name: "Create a global Provider and export it",
                  code: [
                    `'use client';`,
                    `import {store} from '@/redux/app/store';`,
                    `import {ReactNode} from 'react';`,
                    `import {Provider} from 'react-redux';`,
                    `export function ReduxProvider({children}: {children: ReactNode}) {`,
                    `  return <Provider store={store}>{children}</Provider>;`,
                    `}`,
                  ],
                  fileName: "src/redux/provider.tsx",
                },
                {
                  id: "3",
                  name: "Import App Provider",
                  code: ["import {ReduxProvider} from '@/redux/provider';"],
                  fileName: "App.tsx",
                },

                {
                  id: "4",
                  name: "Wrap App Provider",
                  code: [" <ReduxProvider>{children}</ReduxProvider>"],
                  fileName: "App.tsx",
                },
                {
                  id: "5",
                  name: "Create api Slice",
                  code: [
                    `import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';`,
                    `export const apiSlice = createApi({`,
                    `  reducerPath: 'api',`,
                    `  baseQuery: fetchBaseQuery({`,
                    `    baseUrl: 'http://localhost:3000/api',`,
                    `    prepareHeaders: async (headers, {getState, endpoint}) => {`,
                    `      const token = getState()?.auth?.accessToken;`,
                    `      if (token) {`,
                    `        headers.set('Authorization', \`Bearer \${token}\`);`,
                    `      }`,
                    `      return headers;`,
                    `    },`,
                    `  }),`,
                    `  endpoints: builder => ({}),`,
                    `});`,
                  ],
                  fileName: "App.tsx",
                },
                {
                  id: "6",
                  name: "Create thunk function using createApi [for post]",
                  code: [
                    `import {current} from '@reduxjs/toolkit';`,
                    `import {apiSlice} from '../api/apiSlice';`,
                    `import {initSinglePostDataType} from '@/app/post/page';`,
                    `export const postsApi = apiSlice.injectEndpoints({`,
                    `  endpoints: builder => ({`,
                    `    // endpoints here`,
                    `    getPosts: builder.query({`,
                    `      query: () => \`/posts\`,`,
                    `    }),`,
                    `    getPost: builder.query({`,
                    `      query: id => \`/posts/\${id}\`,`,
                    `    }),`,
                    `    updatePost: builder.mutation({`,
                    `      query: ({id, data}) => ({`,
                    `        url: \`/posts/\${id}\`,`,
                    `        method: 'PATCH',`,
                    `        body: data,`,
                    `      }),`,
                    `      async onQueryStarted(arg, {queryFulfilled, dispatch}) {`,
                    `        // optimistic cache update start`,
                    `        const patchResult1 = dispatch(`,
                    `          apiSlice.util.updateQueryData(`,
                    `            'getPosts',`,
                    `            undefined,`,
                    `            (draft: initSinglePostDataType[]) => {`,
                    `              const newValue = draft.map(curr => {`,
                    `                if (curr.id === parseInt(arg.id)) {`,
                    `                  return {...curr, ...arg.data};`,
                    `                } else {`,
                    `                  return curr;`,
                    `                }`,
                    `              });`,
                    `              Object.assign(draft, newValue);`,
                    `            },`,
                    `          ),`,
                    `        );`,
                    `        // optimistic cache update end`,
                    `        try {`,
                    `          const query = await queryFulfilled;`,
                    `        } catch {`,
                    `          patchResult1.undo();`,
                    `        }`,
                    `      },`,
                    `    }),`,
                    `    editPost: builder.mutation({`,
                    `      query: arg => ({`,
                    `        url: \`/posts/\${arg.id}\`,`,
                    `        method: 'PATCH',`,
                    `        body: arg,`,
                    `      }),`,
                    `      async onQueryStarted(arg, {queryFulfilled, dispatch}) {`,
                    `        console.log(' patch query started', arg);`,
                    `        const patchResult = dispatch(`,
                    `          apiSlice.util.updateQueryData('getPosts', {}, draft => {`,
                    `            console.log('post draft : ', JSON.stringify(draft));`,
                    `            const others = draft.map(curr => {`,
                    `              let result = {...curr};`,
                    `              if (parseInt(curr.id) === parseInt(arg.id)) {`,
                    `                result.title = arg.title;`,
                    `              }`,
                    `              return result;`,
                    `            });`,
                    `            Object.assign(draft, others);`,
                    `          }),`,
                    `        );`,
                    `        try {`,
                    `          await queryFulfilled;`,
                    `        } catch {`,
                    `          patchResult.undo();`,
                    `        }`,
                    `        try {`,
                    `          const query = await queryFulfilled;`,
                    `          // pessimistic cache update start`,
                    `          // if (query?.data?.id) {`,
                    `          //   dispatch(`,
                    `          //     apiSlice.util.updateQueryData(`,
                    `          //       'getPosts',`,
                    `          //       {},`,
                    `          //       (draft: initSinglePostDataType[]) => {`,
                    `          //         const newValue = draft.map(curr => {`,
                    `          //           if (+curr.id === +arg.id) {`,
                    `          //             return {...query?.data};`,
                    `          //           } else {`,
                    `          //             return curr;`,
                    `          //           }`,
                    `          //         });`,
                    `          //         Object.assign(draft, newValue);`,
                    `          //       },`,
                    `          //     ),`,
                    `          //   );`,
                    `          // }`,
                    `          // pessimistic cache update end`,
                    `        } catch {`,
                    `          patchResult.undo();`,
                    `        }`,
                    `      },`,
                    `    }),`,
                    `    deletePost: builder.mutation({`,
                    `      query: id => ({`,
                    `        url: \`/posts/\${id}\`,`,
                    `        method: 'DELETE',`,
                    `      }),`,
                    `      async onQueryStarted(arg, {dispatch, queryFulfilled}) {`,
                    `        const patchResult = dispatch(`,
                    `          apiSlice.util.updateQueryData('getPosts', {}, draft => {`,
                    `            const others = draft.filter(curr => {`,
                    `              return parseInt(curr.id) !== parseInt(arg);`,
                    `            });`,
                    `            Object.assign(draft, others);`,
                    `          }),`,
                    `        );`,
                    `        try {`,
                    `          await queryFulfilled;`,
                    `        } catch {`,
                    `          patchResult.undo();`,
                    `        }`,
                    `      },`,
                    `    }),`,
                    `    addPost: builder.mutation({`,
                    `      query: data => ({`,
                    `        url: \`/posts\`,`,
                    `        method: 'POST',`,
                    `        body: data,`,
                    `      }),`,
                    `      async onQueryStarted(arg, {queryFulfilled, dispatch}) {`,
                    `        console.log('rtk , arg: ', arg);`,
                    `        dispatch(`,
                    `          apiSlice.util.updateQueryData('getPosts', {}, draft => {`,
                    `            draft.push({title: arg.title, id: 120});`,
                    `          }),`,
                    `        );`,
                    `        try {`,
                    `          await queryFulfilled;`,
                    `          // pessimistic cache update end`,
                    `        } catch {}`,
                    `      },`,
                    `    }),`,
                    `  }),`,
                    `});`,
                    `export const {`,
                    `  useGetPostsQuery,`,
                    `useGetPostQuery`,
                    `useEditPostMutation,   useUpdatePostMutation,   useDeletePostMutation,`,
                    `  useAddPostMutation,`,
                    `} = postsApi;`,
                  ],
                  fileName: "src/redux/features/post/postApi.tsx",
                },
                {
                  id: "7",
                  name: "Create apiSlice using createSlice [for post]",
                  code: [
                    `import {createSlice} from '@reduxjs/toolkit';`,
                    `const initialState = {};`,
                    `const postsSlice = createSlice({`,
                    `name: 'posts',  `,
                    `initialState,  `,
                    `reducers: {},  `,
                    `});`,
                    `export const {} = postsSlice.actions;`,
                    `export default postsSlice.reducer;`,
                    `// Must update store for using this slice`,
                  ],
                  fileName: "src/redux/features/post/postSlice.tsx",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "013",
          important: true,
          title: "ZOD",
          documentation: [
            {
              id: "1",
              url: "https://zod.dev/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/zod",
              name: "Go NPM",
            },
          ],
          description: [
            "TypeScript-first schema validation with static type inference",
          ],
          code: [
            { id: "1", npm: "" },
            { id: "2", yarn: "yarn add " },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "Zod Schema",
              description: "You can validated form with this schema",
              content: [
                {
                  id: "1",
                  name: "Import Zod",
                  code: [`import { z } from "zod";`],
                  fileName: "where you create from",
                },
                {
                  id: "2",
                  name: "Import Zod",
                  code: [
                    `export const newItemSchema = z.object({`,
                    `  item: z`,
                    `    .string({`,
                    `      invalid_type_error: "Item must be a string",`,
                    `      required_error: "Item is required",`,
                    `    })`,
                    `    .min(3, "Minimum 3 characters")`,
                    `    .max(20, "Maximum 20 characters")`,
                    `    .trim(),`,

                    `  price: z`,
                    `    .string()`,
                    `    .refine((value) => !isNaN(parseFloat(value)), {`,
                    `      message: "Please provide a number",`,
                    `    })`,
                    `    .optional(),`,

                    `  info: z`,
                    `    .string({`,
                    `      invalid_type_error: "Info must be a string",`,
                    `    })`,
                    `    .min(3, "Minimum 3 characters")`,
                    `    .max(120, "Maximum 120 characters")`,
                    `    .trim()`,
                    `    .optional(),`,

                    `  option: z`,
                    `    .object({`,
                    `      name: z`,
                    `        .string({`,
                    `          invalid_type_error: "Name must be a string",`,
                    `          required_error: "Name is required",`,
                    `        })`,
                    `        .min(3, "Minimum 3 characters")`,
                    `        .max(20, "Maximum 20 characters")`,
                    `        .trim(),`,

                    `      optionFor: z`,
                    `        .string({`,
                    `          invalid_type_error: "OptionFor must be a string",`,
                    `        })`,
                    `        .min(3, "Minimum 3 characters")`,
                    `        .max(60, "Maximum 60 characters")`,
                    `        .trim()`,
                    `        .optional(),`,

                    `      required: z.boolean().optional(),`,

                    `      options: z`,
                    `        .object({`,
                    `          name: z`,
                    `            .string({`,
                    `              invalid_type_error: "Name must be a string",`,
                    `            })`,
                    `            .min(3, "Minimum 3 characters")`,
                    `            .max(20, "Maximum 20 characters")`,
                    `            .trim(),`,
                    `          price: z`,
                    `            .string()`,
                    `            .refine((value) => !isNaN(parseFloat(value)), {`,
                    `              message: "Please provide a number",`,
                    `            })`,
                    `            .optional(),`,
                    `        })`,
                    `        .array()`,
                    `        .optional(),`,
                    `    })`,
                    `    .array()`,
                    `    .optional(),`,
                    `});`,
                  ],
                  fileName: "where you create from",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "014",
          important: true,
          title: "ZUSTAND",
          documentation: [
            {
              id: "1",
              url: "https://zod.dev/?id=table-of-contents",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/zod",
              name: "Go NPM",
            },
          ],
          description: [""],
          code: [
            { id: "1", npm: "npm i zod" },
            { id: "2", yarn: "yarn add zod" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "ZuStand Template",
              description: "state management",
              content: [
                {
                  id: "1",
                  name: "demo code ",
                  code: [
                    `import { create } from 'zustand'`,
                    `const useStore = create((set) => ({`,
                    `  count: 1,`,
                    `  inc: () => set((state) => ({ count: state.count + 1 })),`,
                    `}))`,
                    `function Counter() {`,
                    `  const { count, inc } = useStore()`,
                    `  return (`,
                    `    <div>`,
                    `      <span>{count}</span>`,
                    `      <button onClick={inc}>one up</button>`,
                    `    </div>`,
                    `  )`,
                    `}`,
                  ],
                  fileName: "",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "015",
          important: true,
          title: "TANSTACK",
          documentation: [
            {
              id: "1",
              url: "https://tanstack.com/query/latest",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/@tanstack/react-query",
              name: "Go NPM",
            },
          ],
          description: [
            "Powerful asynchronous state management for TS/JS, React, Solid, Vue, Svelte and Angular",
          ],
          code: [
            { id: "1", npm: "npm i @tanstack/react-query" },
            { id: "2", yarn: "yarn add @tanstack/react-query" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "A demo with tanStack Query",
              description: "",
              content: [
                {
                  id: "1",
                  name: "",
                  code: [
                    `  import {`,
                    `  QueryClient,`,
                    `  QueryClientProvider,`,
                    `  useQuery,`,
                    `} from '@tanstack/react-query'`,

                    `const queryClient = new QueryClient()`,

                    `export default function App() {`,
                    `  return (`,
                    `    <QueryClientProvider client={queryClient}>`,
                    `      <Example />`,
                    `    </QueryClientProvider>`,
                    `  )`,
                    `}`,

                    `function Example() {`,
                    `  const { isPending, error, data } = useQuery({`,
                    `    queryKey: ['repoData'],`,
                    `    queryFn: () =>`,
                    `      fetch('https://api.github.com/repos/TanStack/query').then((res) =>`,
                    `        res.json(),`,
                    `      ),`,
                    `  })`,

                    `  if (isPending) return 'Loading...'`,

                    `  if (error) return 'An error has occurred: ' + error.message`,

                    `  return (`,
                    `    <div>`,
                    `      <h1>{data.name}</h1>`,
                    `      <p>{data.description}</p>`,
                    `      <strong>👀 {data.subscribers_count}</strong>{' '}`,
                    `      <strong>✨ {data.stargazers_count}</strong>{' '}`,
                    `      <strong>🍴 {data.forks_count}</strong>`,
                    `    </div>`,
                    `  )`,
                    `}`,
                  ],
                  fileName: "",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "018",
          important: true,
          title: "Async Storage",
          documentation: [
            {
              id: "1",
              url: "",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "",
              name: "Go NPM",
            },
          ],
          description: [
            "AsyncStorage is an unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It should be used instead of LocalStorage.",
          ],
          code: [
            {
              id: "1",
              npm: "npm i @react-native-async-storage/async-storage",
            },
            {
              id: "2",
              yarn: "yarn add @react-native-async-storage/async-storage",
            },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "AsyncStorage",
              description: "example of code ",
              content: [
                {
                  id: "1",
                  name: "",
                  code: [
                    `import {AsyncStorage} from 'react-native';`,
                    `  await AsyncStorage.setItem('data')`,
                    `  await AsyncStorage.getItem('data')`,
                  ],
                  fileName: "",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "024",
          important: true,
          title: "RabbitMQ",
          documentation: [
            {
              id: "1",
              url: "https://www.rabbitmq.com/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/rabbitmq-client",
              name: "Go NPM",
            },
          ],
          description: [
            "Node.js client library for RabbitMQ. Publish messages, declare rules for routing those messages into queues, consume messages from queues.",
          ],
          code: [
            { id: "1", npm: "npm i amqplib" },
            { id: "2", npm: "npm i rabbitmq-client" },
            { id: "3", yarn: "yarn add amqplib" },
            { id: "4", yarn: "yarn add rabbitmq-client" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "RabbitMQ",
              description: "Example of RabbitMQ",
              content: [
                {
                  id: "1",
                  name: "connect to RabbitMQ",
                  code: [],
                  fileName: "",
                },
                {
                  id: "2",
                  name: "import those file and edit it",
                  code: [],
                  fileName: "",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "025",
          important: true,
          title: "Redis",
          documentation: [
            {
              id: "1",
              url: "https://redis.io/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/redis",
              name: "Go NPM",
            },
          ],
          description: ["SEE HOW FAST FEELS"],
          code: [
            { id: "1", npm: "npm i redis" },
            { id: "2", yarn: "yarn add redis" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "Redis",
              description: "redis use for cache for backend ",
              content: [
                {
                  id: "1",
                  name: "connect with redis",
                  code: [
                    `const { createClient } = require("redis");`,
                    `/* create client by url */`,
                    `const client = createClient({  `,
                    `url: process.env.REDIS_ENDPOINTS,`,
                    `});`,
                    `/* connect client to server for cache */`,
                    `module.exports.runCache = async () => {  `,
                    `try {`,
                    `    client.on("error", (err) => console.log("Redis Client Error", err));`,
                    `    await client.connect();`,
                    `    console.log("Redis is connected");  `,
                    `} catch (error) {`,
                    `    console.log(error, "Ops! Error to connect redis");  `,
                    `}`,
                    `};`,
                    `/* redis get || Find */`,
                    `module.exports.redisGet = async (key) => {  `,
                    `const result = await client.get(key);  `,
                    `return JSON.parse(result);`,
                    `};`,
                    `/* redis set || Post | Save */`,
                    `module.exports.redisSet = async (key, value) => {  `,
                    `const result = await client.set(key, JSON.stringify(value));  `,
                    `return result;`,
                    `};`,
                    `/* redis del || Delete */`,
                    `module.exports.redisDelete = async (key) => {  `,
                    `const result = await client.del(key);  `,
                    `return result;`,
                    `};`,
                  ],
                  fileName: "",
                },
                {
                  id: "2",
                  name: "import and use those functions",
                  code: [
                    `const { redisGet, redisSet, redisDelete } = require("./../../utils/cacheRedis");`,
                  ],
                  fileName: "",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "026",
          important: true,
          title: "MongoDB & Mongoose",
          documentation: [
            {
              id: "1",
              url: "https://www.mongodb.com/docs/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/mongodb",
              name: "Go NPM",
            },
          ],
          description: ["Database @ User friendly for JavaScript development"],
          code: [
            { id: "1", npm: "npm i mongodb" },
            { id: "2", yarn: "yarn add mongodb" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "Next Backend Api with mongoose ",
              description: "",
              content: [
                {
                  id: "1",
                  name: "Full api",
                  code: [
                    ` import dbConnect from '@/lib/dbConnect';`,
                    `import Rtk, {IRtk} from '@/models/Rtk';`,
                    `import type {NextApiRequest, NextApiResponse} from 'next';`,

                    `export async function GET(req: NextApiRequest, res: NextApiResponse) {`,
                    `  await dbConnect();`,

                    `  const data: IRtk[] = await Rtk.find({});`,
                    `  const result = {data, message: 'get request invoked successfully'};`,
                    `  return new Response(JSON.stringify(result));`,
                    `}`,
                    `export async function POST(`,
                    `  req: NextApiRequest & {json: () => void},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  await dbConnect();`,

                    `  const result = await req.json();`,

                    `  const rtk: IRtk = await Rtk.create(result);`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      data: result,`,
                    `      result: rtk,`,
                    `      message: 'Post request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `}`,

                    `// it can change all data.`,
                    `export async function PUT(`,
                    `  req: NextApiRequest & {json: () => {id: string; data: any}},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  await dbConnect();`,

                    `  const result = await req.json();`,

                    `  const rtk: IRtk = await Rtk.updateOne({_id: result.id}, {name: result.title});`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      data: result,`,
                    `      result: rtk,`,
                    `      message: 'Put request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `}`,

                    `// only change particular data not change all data`,
                    `export async function PATCH(`,
                    `  req: NextApiRequest & {json: () => void},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  await dbConnect();`,
                    ``,
                    `  const result = await req.json();`,
                    ``,
                    `  const rtk: IRtk = await Rtk.updateOne({_id: result.id}, {name: result.title});`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      data: result,`,
                    `      result: rtk,`,
                    `      message: 'Patch request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `}`,
                    ``,
                    `export async function DELETE(`,
                    `  req: NextApiRequest & {json: () => void},`,
                    `  res: NextApiResponse,`,
                    `) {`,
                    `  await dbConnect();`,
                    ``,
                    `  const result = await req.json();`,

                    `  const rtk: IRtk = await Rtk.deleteOne({_id: result.id});`,
                    `  return new Response(`,
                    `    JSON.stringify({`,
                    `      data: result,`,
                    `      result: rtk,`,
                    `      message: 'Patch request successful invoke',`,
                    `    }),`,
                    `  );`,
                    `} `,
                  ],
                  fileName: "route.ts",
                },
              ],
            },
          ],
          examplePath: "",
        },
        {
          id: "027",
          important: true,
          title: "MySQL",
          documentation: [
            {
              id: "1",
              url: "https://dev.mysql.com/doc/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/mysql",
              name: "Go NPM",
            },
          ],
          description: [
            "This is a node.js driver for mysql. It is written in JavaScript, does not require compiling, and is 100% MIT licensed.",
          ],
          code: [
            { id: "1", npm: "npm i mysql" },
            { id: "2", yarn: "yarn add mysql" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "",
              description: "",
              content: [{ id: "1", name: "", code: [""], fileName: "" }],
            },
          ],
          examplePath: "",
        },
        {
          id: "028",
          important: true,
          title: "PUPPETEER",
          documentation: [
            {
              id: "1",
              url: "https://pptr.dev/",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/puppeteer",
              name: "Go NPM",
            },
          ],
          description: [
            "Puppeteer is a Node.js library which provides a high-level API to control Chrome/Chromium over the DevTools Protocol. Puppeteer runs in headless mode by default, but can be configured to run in full ('headful') Chrome/Chromium.",
          ],
          code: [
            { id: "1", npm: "npm i puppeteer" },
            { id: "2", yarn: "yarn add puppeteer" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "",
              description: "",
              content: [{ id: "1", name: "", code: [""], fileName: "" }],
            },
          ],
          examplePath: "",
        },
        {
          id: "030",
          title: "Copy To Clipboard",
          documentation: [
            {
              id: "1",
              url: "https://github.com/sudodoki/copy-to-clipboard#readme",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "https://www.npmjs.com/package/copy-to-clipboard",
              name: "Go NPM",
            },
          ],
          description: [
            "Simple module exposing copy function that will try to use execCommand with fallback to IE-specific clipboardData interface and finally, resort to usual prompt with proper text content and message.",
          ],
          code: [
            { id: "1", npm: "npm i copy-to-clipboard" },
            { id: "2", yarn: "yarn add copy-to-clipboard" },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "",
              description: "",
              content: [{ id: "1", name: "", code: [""], fileName: "" }],
            },
          ],
          examplePath: "",
        },
        {
          id: "",
          title: "",
          documentation: [
            {
              id: "1",
              url: "",
              name: "Go Documentation",
            },
            {
              id: "2",
              url: "",
              name: "Go NPM",
            },
          ],
          description: [""],
          code: [
            { id: "1", npm: "" },
            { id: "2", yarn: "yarn add " },
          ],
          boilerPlate: [
            {
              id: "1",
              name: "",
              description: "",
              content: [{ id: "1", name: "", code: [""], fileName: "" }],
            },
          ],
          examplePath: "",
        },
      ],
    },
  ],
};
